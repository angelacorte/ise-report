@inbook{Bordini2005,
  author    = {Bordini, Rafael H.
               and H{\"u}bner, Jomi F.
               and Vieira, Renata},
  editor    = {Bordini, Rafael H.
               and Dastani, Mehdi
               and Dix, J{\"u}rgen
               and El Fallah Seghrouchni, Amal},
  title     = {Jason and the Golden Fleece of Agent-Oriented Programming},
  booktitle = {Multi-Agent Programming: Languages, Platforms and Applications},
  year      = {2005},
  publisher = {Springer US},
  address   = {Boston, MA},
  pages     = {3--37},
  abstract  = {This chapter describes Jason, an interpreter written in Java for an extended version of AgentSpeak, a logic-based agent-oriented programming language that is suitable for the implementation of reactive planning systems according to the BDI architecture. We describe both the language and the various features and tools available in the platform.},
  isbn      = {978-0-387-26350-2},
  doi       = {10.1007/0-387-26350-0_1},
  url       = {https://doi.org/10.1007/0-387-26350-0_1}
}

@inproceedings{10.1007/978-3-031-43264-4_4,
  author    = {Baiardi, Martina
               and Burattini, Samuele
               and Ciatto, Giovanni
               and Pianini, Danilo},
  editor    = {Malvone, Vadim
               and Murano, Aniello},
  title     = {JaKtA: BDI Agent-Oriented Programming in Pure Kotlin},
  booktitle = {Multi-Agent Systems},
  year      = {2023},
  publisher = {Springer Nature Switzerland},
  address   = {Cham},
  pages     = {49--65},
  abstract  = {Multi-paradigm languages are becoming more and more popular, as they allow developers to choose the most suitable paradigm for each task. Most commonly, we observe the combination of object-oriented (OOP) and functional programming (FP), however, in principle, other paradigms could be hybridised. In this paper, we present JaKtA, an internal DSL adding support for the definition of belief-desire-intention (BDI) agents in Kotlin. We believe is a first step to investigate the blending of Agent-Oriented Programming (AOP) with other popular paradigms and we discuss the opportunity and value of doing so with an internal DSLs. Finally, through JaKtA, we show how this can already lead to compactly and expressively create BDI agents that smoothly interoperate with the host language, its libraries and tooling.},
  isbn      = {978-3-031-43264-4}
}

@misc{kotlin,
  title        = {Kotlin Language},
  howpublished = {\url{https://kotlinlang.org/}}
}

@misc{java,
  title        = {Java Language},
  howpublished = {\url{https://www.java.com/en/}}
}

@misc{groovy,
  title        = {Groovy Language},
  howpublished = {\url{https://groovy-lang.org/}}
}

@misc{gradle,
  title        = {Gradle Build Tool},
  howpublished = {\url{https://gradle.org/}}
}

@misc{ktor,
  title        = {Ktor Library},
  howpublished = {\url{https://ktor.io/}}
}

@misc{junit,
  title        = {Junit Framework},
  howpublished = {\url{https://junit.org/junit5/}}
}

@misc{repo,
  title        = {JaKtA Repository},
  howpublished = {\url{https://github.com/FilippoVissani/jakta/tree/develop}}
}